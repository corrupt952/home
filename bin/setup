#!/usr/bin/env bash

#
# Set error flags
#
set -o nounset
set -o errexit
set -o pipefail

#
# Define variables
#
GIT_ROOT_DIR=$(git rev-parse --show-toplevel)
CLUSTER_NAME="ira"
ARGOCD_HOST="argocd.ira.zuki.me"

#
# Add host configuration
#
if [ -z "$(grep argocd.local /etc/hosts)" ]; then
    echo "127.0.0.1 ${ARGOCD_HOST}" | sudo tee -a /etc/hosts
fi

#
# Create k8s cluster
#
if [ -z "$(kind get clusters 2>&1 | grep ira)" ]; then
    echo "Create cluster ${CLUSTER_NAME}"
    kind create cluster --name ${CLUSTER_NAME} --config ${GIT_ROOT_DIR}/kindconfig.yaml
else
    echo "Cluster already exists: ${CLUSTER_NAME}"
fi

#
# Create namespaces
#
echo "Create namespaces..."
kubectl apply -k namespaces/base

#
# Setup Nginx Ingress Controller
#
echo "Create Nginx Ingress Controller..."
kubectl apply -k nginx-ingress-controller/base

#
# Setup Argo CD
#
kubectl apply -k argocd/base
if [ -z "$(kubectl -n argocd get pods --field-selector=status.phase=Running 2>&1 | grep argocd-server)" ]; then
    echo -n "argocd-server waiting"
    while [ -z "$(kubectl -n argocd get pods --field-selector=status.phase=Running 2>&1 | grep argocd-server)" ];
    do
        echo -n "."
        sleep 1
    done
    echo ""
fi
argocd login \
    --insecure \
    --grpc-web \
    --username admin \
    --password "$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)" \
    ${ARGOCD_HOST}
argocd app create argocd-config \
    --insecure \
    --grpc-web \
    --repo https://github.com/corrupt952/ira-apps.git \
    --path argocd-config/base \
    --dest-namespace argocd \
    --dest-server https://kubernetes.default.svc \
    --sync-policy automated \
    --auto-prune \
    --revision master
